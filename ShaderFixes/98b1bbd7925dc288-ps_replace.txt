// brightpassfilter.shcd Brightness pass for bloom, performed before the blur.
// ---- Created with 3Dmigoto v1.2.40 on Sun Jul 31 19:52:42 2016

cbuffer cBrightPassParam : register(b0)
{
  float4 cBrightPassParam : packoffset(c0);
}

SamplerState sInputS_s : register(s0);
SamplerState sGeometryS_s : register(s1);
Texture2D<float4> sInputT : register(t0);
Texture2D<float4> sGeometryT : register(t1);


// 3Dmigoto declarations
#define cmp -


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  // sGeometry seems to contain the type of geometry, as in material.
  r0.xyz = sGeometryT.Sample(sGeometryS_s, v1.xy).xyw; 
  r0.x = dot(float2(6502.5,25.5), r0.xy);
  r0.y = -r0.z * r0.z + 1; // This appears to specifically be for specular highlights. 
  r0.x = 2 + r0.x;
  r0.x = 1 - (1 / r0.x); // r0.x appears to govern materials like metal and crystals that are intrinsically glowy.
  // sInput seems to contain the original image. w channel contains bright highlights.
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;  
  o0.w = r1.w;
  r0.xzw = r1.xyz * r0.xxx;
  r0.xyz = r0.xzw * r0.yyy;
  r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343)); // Convert r0 to greyscale.
  r0.w = cmp(r0.w >= cBrightPassParam.x); // Apply threshold
  //r0.w = r0.w ? 1.000000 : 0; // Set everything under threshold to 0

  // Boosts bloom intensity to match expectations 
  o0.xyz = r0.xyz * -r0.w; // Apply mask to r0
  return;
}

void main2( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  // GeometryT seems to contain the type of geometry, as in material.
  r0.xyz = sGeometryT.Sample(sGeometryS_s, v1.xy).xyw; 
  r0.x = dot(float2(6502.5,25.5), r0.xy);
  r0.y = -r0.z * r0.z + 1; // This appears to specifically be for specular highlights. 
  r0.x = 2 + r0.x;
  r0.x = 1 - (1 / r0.x); // r0.x appears to govern materials like metal and crystals that are intrinsically glowy.
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;  
  o0.w = r1.w;
  r0.xzw = r1.xyz * r0.xxx;
  r0.xyz = r0.xzw * r0.yyy;
  r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343)); // Convert r0 to greyscale.
  r0.w = cmp(r0.w >= cBrightPassParam.x); // Apply threshold
  r0.w = r0.w ? 1.000000 : 0; // Set everything under threshold to 0
  o0.xyz = r0.xyz * r0.www; // Apply mask to r0
  return;
}


void orig( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = sGeometryT.Sample(sGeometryS_s, v1.xy).xyw;
  r0.x = dot(float2(6502.5,25.5), r0.xy);
  r0.y = -r0.z * r0.z + 1;
  r0.x = 2 + r0.x;
  r0.x = 1 / r0.x;
  r0.x = 1 + -r0.x;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  o0.w = r1.w;
  r0.xzw = r1.xyz * r0.xxx;
  r0.xyz = r0.xzw * r0.yyy;
  r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343));
  r0.w = cmp(r0.w >= cBrightPassParam.x);
  r0.w = r0.w ? 1.000000 : 0;
  o0.xyz = r0.xyz * r0.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.40 on Sun Jul 31 19:52:42 2016
//
//
// Buffer Definitions: 
//
// cbuffer cBrightPassParam
// {
//
//   float4 cBrightPassParam;           // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sGeometry.S                       sampler      NA          NA    1        1
// sInput.T                          texture  float4          2d    0        1
// sGeometry.T                       texture  float4          2d    1        1
// cBrightPassParam                  cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xywz, s1
dp2 r0.x, l(6502.500000, 25.500000, 0.000000, 0.000000), r0.xyxx
mad r0.y, -r0.z, r0.z, l(1.000000)
add r0.x, r0.x, l(2.000000)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, -r0.x, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mov o0.w, r1.w
mul r0.xzw, r0.xxxx, r1.xxyz
mul r0.xyz, r0.yyyy, r0.xzwx
dp3 r0.w, r0.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
ge r0.w, r0.w, cb0[0].x
and r0.w, r0.w, l(0x3f800000)
mul o0.xyz, r0.wwww, r0.xyzx
ret 
// Approximately 16 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
