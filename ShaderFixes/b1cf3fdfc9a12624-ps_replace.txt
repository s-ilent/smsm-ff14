// DoF blending (/gpose only?)
// ---- Created with 3Dmigoto v1.2.40 on Thu Oct 27 18:49:30 2016

SamplerState sInputS_s : register(s0);
SamplerState sNearS_s : register(s1);
SamplerState sFarS_s : register(s2);
Texture2D<float4> sInputT : register(t0);
Texture2D<float4> sNearT : register(t1);
Texture2D<float4> sFarT : register(t2);


// 3Dmigoto declarations
#define cmp -


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  //uint4 bitmask, uiDest;
  //float4 fDest;

  float4 texInput = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  // w component contains far focus (depth)
  float4 texFar = sFarT.Sample(sFarS_s, v1.xy).xyzw;
  // w component contains far focus
  float4 texNear = sNearT.Sample(sNearS_s, v1.xy).xyzw;
  // w component contains near focus (inverse)
  float2 depth = float2(texInput.w, texFar.w);

  //texFar = lerp(texNear, texFar, 0.75);
  
  depth = depth - 0.5; // Focal point to zero
  depth = -abs(depth) * 2 + 1; // In-focus is 1, out of focus is 0
  depth = max(0, depth); // Clamp
  //depth = saturate(depth);
  depth = 1 + -depth; // Reverse
  // This version of the hack just skips the Near plane and depends on
  // the added bokeh to the Far plane.
  float depthMod = 0;

  // Totally radial
  float radialDist = distance(v1.xy, 0.5);
  radialDist = smoothstep(0.0, depth + 1.0/0.5, radialDist);
  depth += saturate(radialDist);

  depthMod = depth.y;
  //depthMod = lerp(depthMod+1.4, -0.5, 1-depthMod);
  depthMod = smoothstep(0.0, 0.5, depthMod);
  //depthMod = depthMod * 2;
  //depthMod = saturate(depthMod);
  //o0.xyz = depthMod;

  //depth = 0.5 + -texNear.w; // Flip depth
  //depth = saturate(depth + depth); // Double intensity
  texInput.xyz = lerp(texInput, texFar, depthMod);
  o0.xyz = texInput;
  o0.w = 0;
  //o0 = texFar.w;
  return;
}

void dec1( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  //uint4 bitmask, uiDest;
  //float4 fDest;

  float4 texInput = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  float depth = texInput.w - 0.5;
  depth = -abs(depth) * 2 + 1;
  depth = max(0, depth);
  depth = 1 + -depth;
  float3 texFar = sFarT.Sample(sFarS_s, v1.xy).xyz;
  texFar = texFar - texInput.xyz;
  texInput.xyz = depth * texFar.xyz + texInput.xyz;
  float4 texNear = sNearT.Sample(sNearS_s, v1.xy).xyzw;
  texNear.xyz = texNear.xyz - texInput.xyz;
  depth = 0.5 + -texNear.w;
  depth = saturate(depth + depth);
  o0.xyz = depth * texNear.xyz + texInput.xyz;
  o0.w = 0;
  return;
}

void orig( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r0.w = -0.5 + r0.w;
  r0.w = -abs(r0.w) * 2 + 1;
  r0.w = max(0, r0.w);
  r0.w = 1 + -r0.w;
  r1.xyz = sFarT.Sample(sFarS_s, v1.xy).xyz;
  r1.xyz = r1.xyz + -r0.xyz;
  r0.xyz = r0.www * r1.xyz + r0.xyz;
  r1.xyzw = sNearT.Sample(sNearS_s, v1.xy).xyzw;
  r1.xyz = r1.xyz + -r0.xyz;
  r0.w = 0.5 + -r1.w;
  r0.w = saturate(r0.w + r0.w);
  o0.xyz = r0.www * r1.xyz + r0.xyz;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.40 on Thu Oct 27 18:49:30 2016
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sNear.S                           sampler      NA          NA    1        1
// sFar.S                            sampler      NA          NA    2        1
// sInput.T                          texture  float4          2d    0        1
// sNear.T                           texture  float4          2d    1        1
// sFar.T                            texture  float4          2d    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
add r0.w, r0.w, l(-0.500000)
mad r0.w, -|r0.w|, l(2.000000), l(1.000000)
max r0.w, r0.w, l(0.000000)
add r0.w, -r0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s2
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1
add r1.xyz, -r0.xyzx, r1.xyzx
add r0.w, -r1.w, l(0.500000)
add_sat r0.w, r0.w, r0.w
mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov o0.w, l(0)
ret 
// Approximately 15 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 