// DoF background...? Focusing?
// ---- Created with 3Dmigoto v1.2.31 on Sat Mar 12 06:28:10 2016


cbuffer cViewDepthFactor : register(b0)
{
  float4 cViewDepthFactor : packoffset(c0);
}

SamplerState sDepthS_s : register(s0);
SamplerState sDepthNormalZS_s : register(s1);
Texture2D<float4> sDepthTex : register(t0);
Texture2D<float4> sDepthNormalZTex : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float2 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  // This depth buffer is special and needs to be transformed.
  float depth = sDepthTex.Sample(sDepthS_s, v1.xy).x;
  // http://www.humus.name/temp/Linearize%20depth.txt
  // This appears to match "LZ2 in two instructions"
  // Which would make
  // cViewDepthFactor.x = far / near
  // cViewDepthFactor.y = 1.0 - x
  depth = 1 / (depth * cViewDepthFactor.y + cViewDepthFactor.x);

  // This depth buffer is normal and loses precision after a while.
  r0.y = sDepthNormalZTex.Sample(sDepthNormalZS_s, v1.xy).x;
  // So it's combined with the above one.
  depth = min(r0.y, depth);

  // This appears to be for the mask.
  r0.y = (depth/255)*10; // *10
  r1.x = floor(r0.y);           
  r1.y = (r1.x * 255)/10;
  r1.y = depth - r1.y;

  // Multiplies the two components of r1 by 1/255 and (1/255)*10.
  o0.x = (r1.x/255)*1; // far
  o0.y = (r1.y/255)*10; // close


  // Distant objects are removed from the bloom.  I guess they're already blurred enough.
  depth = cmp(depth >= cViewDepthFactor.w);
  // I don't know what this is for. 
  o0.w = depth ? 1.000000 : 0;
  o0.z = depth ? 0 : 1;
  return;
}

void main_o( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float2 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = sDepthTex.Sample(sDepthS_s, v1.xy).x;
  r0.x = r0.x * cViewDepthFactor.y + cViewDepthFactor.x;
  r0.x = 1 / r0.x;
  r0.y = sDepthNormalZTex.Sample(sDepthNormalZS_s, v1.xy).x;
  r0.x = min(r0.y, r0.x);
  r0.y = 0.0392156877 * r0.x;
  r1.x = floor(r0.y);
  r1.y = -r1.x * 25.5 + r0.x;
  r0.x = cmp(r0.x >= cViewDepthFactor.w); // Something for the bloom
  o0.xy = float2(0.00392156886,0.0392156877) * r1.xy;
  o0.w = r0.x ? 1.000000 : 0;
  o0.z = r0.x ? 0 : 1;
  return;
}

void main_c( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float2 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  // This depth buffer is kind of special and needs to be transformed.
  r0.x = sDepthTex.Sample(sDepthS_s, v1.xy).x;
  // This appears to transform the depth into linear depth. Maybe.
  r0.x = 1 / (r0.x * cViewDepthFactor.y + cViewDepthFactor.x);

  // This depth buffer is normal and loses precision after a while.
  r0.y = sDepthNormalZTex.Sample(sDepthNormalZS_s, v1.xy).x;
  // So it's combined with the above one.
  r0.x = min(r0.y, r0.x);

  // This appears to be for the mask.
  r0.y = 0.0392156877f * r0.x;  // Something like (x/255)*10.
  r1.x = floor(r0.y);           // It's floored to an integer.
  r1.y = -r1.x * 25.5 + r0.x;   // The floored value is turned negative, 
                                // multiplied by 255/10, and the depth is added back to it.

  // Distant objects are removed from the bloom.  I guess they're already blurred enough!
  r0.x = cmp(r0.x >= cViewDepthFactor.w);

  // Multiplies the two components of r1 by 1/255 and (1/255)*10.
  o0.xy = float2(0.00392156886f,0.0392156877f) * r1.xy; 

  // I don't know what this does.
  o0.w = r0.x ? 1.000000 : 0;
  o0.z = r0.x ? 0 : 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.31 on Sat Mar 12 06:28:10 2016
//
//
// Buffer Definitions: 
//
// cbuffer cViewDepthFactor
// {
//
//   float4 cViewDepthFactor;           // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sDepth.S                          sampler      NA          NA    0        1
// sDepthNormalZ.S                   sampler      NA          NA    1        1
// sDepth.T                          texture  float4          2d    0        1
// sDepthNormalZ.T                   texture  float4          2d    1        1
// cViewDepthFactor                  cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
mad r0.x, r0.x, cb0[0].y, cb0[0].x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t1.yxzw, s1
min r0.x, r0.x, r0.y
mul r0.y, r0.x, l(0.0392156877)
round_ni r1.x, r0.y
mad r1.y, -r1.x, l(25.500000), r0.x
ge r0.x, r0.x, cb0[0].w
mul o0.xy, r1.xyxx, l(0.00392156886, 0.0392156877, 0.000000, 0.000000)
and o0.w, r0.x, l(0x3f800000)
movc o0.z, r0.x, l(0), l(1.000000)
ret 
// Approximately 13 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 