// Blur pass, for bloom?
// ---- Created with 3Dmigoto v1.2.61
// Applied twice. 

struct texSampler {
  SamplerState S_s;
  Texture2D<float4> T;
} sInput;


// 3Dmigoto declarations
#define cmp -

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0, // Offset down right a lot
  float4 v2 : TEXCOORD1, //  center |  up right
  float4 v3 : TEXCOORD2, // Offset up left | Offset up left more
  float4 v4 : TEXCOORD3, // Offset down right more | Offset down right
  out float4 o0 : SV_TARGET0)
{
  const float icb[] =       { { 0.162102818  },
                              { 0.120258562  },
                              { 0.120258562  },
                              { 0.120258562  },
                              { 0.120258562  },
                              { 0.0892157331 },
                              { 0.0892157331 },
                              { 0.0892157331 },
                              { 0.0892157331 } };
                         // Total 2.99693
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float2 centre = (v2.xy);
  float2 ulOffset = v3.xy - centre;
  float2 drOffset = v4.xy - centre;
  drOffset *= 2;

  r2 = sInput.T.Sample(sInput.S_s, centre).xyzw;
  r3 = r2;

  float s = 1;
  // How does this make any sense? I'm sampling in two directions for a omnidirectional blur.
  for (int x = 1; x <= 4; x++) {
    float2 offset = drOffset*x;
    r2 += sInput.T.Sample(sInput.S_s, centre - offset).xyzw;
    r2 += sInput.T.Sample(sInput.S_s, centre + offset).xyzw;
    //r2 /= 0.75;
    r3 += r2;
    s += s;
  }
  //r3 *= 1+dot(sInput.T.Sample(sInput.S_s, centre).xyz, 1.0/3.0);
  r3 /= s;
  o0 = r3;

  return;
}

void main_gaussian( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0, // Offset down right a lot
  float4 v2 : TEXCOORD1, //  center |  up right
  float4 v3 : TEXCOORD2, // Offset up left | Offset up left more
  float4 v4 : TEXCOORD3, // Offset down right more | Offset down right
  out float4 o0 : SV_TARGET0)
{
  float weights[6];
  float offsets[6];
    
  weights[0] = 0.13996576;
  weights[1] = 0.24150955;
  weights[2] = 0.13346580;
  weights[3] = 0.04506637;
  weights[4] = 0.00898062;
  weights[5] = 0.00099478;
  
  offsets[0] = 0.00000000;
  offsets[1] = 1.45454545;
  offsets[2] = 3.39393939;
  offsets[3] = 5.33333333;
  offsets[4] = 7.27272727;
  offsets[5] = 9.21212121;

  float2 uv = v2.xy;
  float2 pxSize = v4.xy-v2.xy;
  pxSize *= 1;

  float4 color = 0.0;
  float weightSum = 0.0;

  //color = sInput.T.Sample(sInput.S_s, centre).xyzw;

  {
      color += sInput.T.Sample(sInput.S_s, uv) * weights[0];
      weightSum += weights[0];

      for(int i = 1; i < 6; i++)
      {
          float2 offset = offsets[i] * pxSize;
          color += sInput.T.Sample(sInput.S_s, uv + offset * float2(0.5, 0.0)) * weights[i];
          color += sInput.T.Sample(sInput.S_s, uv - offset * float2(0.5, 0.0)) * weights[i];
          //weightSum += weights[i] * 2.0;
          weightSum += weights[i] * 1.0;
      }

      color /= weightSum;
  }

  o0 = color*1;
}

void main_old1( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0, // Offset down right a lot
  float4 v2 : TEXCOORD1, //  center |  up right
  float4 v3 : TEXCOORD2, // Offset up left | Offset up left more
  float4 v4 : TEXCOORD3, // Offset down right more | Offset down right
  out float4 o0 : SV_TARGET0)
{
  const float4 icb[] = { { 0.598413467,  0, 0, 0},
                         { 0.891054094,  0, 0, 0},
                         { 0.275262833,  0, 0, 0},
                         { 0.0329402238, 0, 0, 0},
                         { 0.891054094,  0, 0, 0},
                         { 0.275262833,  0, 0, 0},
                         { 0.0329402238, 0, 0, 0} };
                         // Total 2.99693
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  /*
  float4 v[5] = { v0,v1,v2,v3,v4 };
  r0.xyzw = float4(0,0,0,0);
  r1.x = 0;
  while (true) {
    r1.y = cmp((int)r1.x >= 3);
    if (r1.y != 0) break;
    r1.y = (uint)r1.x << 1;
    r2.xyzw = sInput.T.Sample(sInput.S_s, v[r1.x+2].xy).xyzw;
    r2.xyzw = icb[r1.y+0].xxxx * r2.xyzw + r0.xyzw;
    r1.y = mad((int)r1.x, 2, 1);
    r3.xyzw = sInput.T.Sample(sInput.S_s, v[r1.x+2].zw).xyzw;
    r0.xyzw = icb[r1.y+0].xxxx * r3.xyzw + r2.xyzw;
    r1.x = (int)r1.x + 1;
  }
  r1.xyzw =  sInput.T.Sample(sInput.S_s, v4.zw).xyzw;
  r1.xyzw -= sInput.T.Sample(sInput.S_s, v4.xy).xyzw;
  o0.xyzw = r1.xyzw * 10;
  */

  // -- Initial setup
  // 
  
  float2 centre = (v2.xy);
  float2 ulOffset = v3.xy - centre;
  float2 drOffset = v4.xy - centre;
  drOffset *= 2;

  r2 = sInput.T.Sample(sInput.S_s, centre).xyzw;
  r3 = r2;

  float s = 1;
  // How does this make any sense? I'm sampling in two directions for a omnidirectional blur.
  for (int x = 1; x <= 4; x++) {
    float2 offset = drOffset*x;
    r2 += sInput.T.Sample(sInput.S_s, centre - offset).xyzw;
    r2 += sInput.T.Sample(sInput.S_s, centre + offset).xyzw;
    //r2 /= 0.75;
    r3 += r2;
    s += 1;
  }
  r3 *= 1+dot(sInput.T.Sample(sInput.S_s, centre).xyz, 1.0/3.0);
  r3 /= s*x;
  o0 = r3;

  return;
}

void orig_fixed( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_TARGET0)
{
  const float4 icb[] = { { 0.598413467, 0, 0, 0},
                              { 0.891054094, 0, 0, 0},
                              { 0.275262833, 0, 0, 0},
                              { 0.0329402238, 0, 0, 0},
                              { 0.891054094, 0, 0, 0},
                              { 0.275262833, 0, 0, 0},
                              { 0.0329402238, 0, 0, 0} };
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 v[5] = { v0,v1,v2,v3,v4 };
  r0.xyzw = float4(0,0,0,0);
  r1.x = 0;
  while (true) {
    r1.y = cmp((int)r1.x >= 3);
    if (r1.y != 0) break;
    r1.y = (uint)r1.x << 1;
    r2.xyzw = sInput.T.Sample(sInput.S_s, v[r1.x+2].xy).xyzw;
    r2.xyzw = icb[r1.y+0].xxxx * r2.xyzw + r0.xyzw;
    r1.y = mad((int)r1.x, 2, 1);
    r3.xyzw = sInput.T.Sample(sInput.S_s, v[r1.x+2].zw).xyzw;
    r0.xyzw = icb[r1.y+0].xxxx * r3.xyzw + r2.xyzw;
    r1.x = (int)r1.x + 1;
  }
  r1.xyzw = sInput.T.Sample(sInput.S_s, v1.xy).xyzw;
  o0.xyzw = r1.xyzw * float4(0.0329402238,0.0329402238,0.0329402238,0.0329402238) + r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.61 on Fri Jun 23 22:01:07 2017
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sInput.T                          texture  float4          2d    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.598413467, 0, 0, 0},
                              { 0.891054094, 0, 0, 0},
                              { 0.275262833, 0, 0, 0},
                              { 0.0329402238, 0, 0, 0},
                              { 0.891054094, 0, 0, 0},
                              { 0.275262833, 0, 0, 0},
                              { 0.0329402238, 0, 0, 0} }
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 4
dcl_indexrange v2.xyzw 3
mov r0.xyzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  ige r1.y, r1.x, l(3)
  breakc_nz r1.y
  ishl r1.y, r1.x, l(1)
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v[r1.x + 2].xyxx, t0.xyzw, s0
  mad r2.xyzw, icb[r1.y + 0].xxxx, r2.xyzw, r0.xyzw
  imad r1.y, r1.x, l(2), l(1)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v[r1.x + 2].zwzz, t0.xyzw, s0
  mad r0.xyzw, icb[r1.y + 0].xxxx, r3.xyzw, r2.xyzw
  iadd r1.x, r1.x, l(1)
endloop 
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mad o0.xyzw, r1.xyzw, l(0.0329402238, 0.0329402238, 0.0329402238, 0.0329402238), r0.xyzw
ret 
// Approximately 16 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  