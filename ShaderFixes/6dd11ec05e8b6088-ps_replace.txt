// Colour grading LUT application
// ---- Created with 3Dmigoto v1.2.61 on Mon Oct 16 00:20:56 2017

cbuffer cFilter : register(b0)
{
  row_major float3x4 cFilter : packoffset(c0);
}

cbuffer cLutParam : register(b1)
{
  float4 cLutParam : packoffset(c0);
}
struct texSampler {
  SamplerState S_s;
  Texture2D<float4> T;
} sInput, sLut;

// SamplerState sInput.S_s : register(s0);
// SamplerState sLut.S_s : register(s1);
// Texture2D<float4> sInput.T : register(t0);
// Texture2D<float4> sLut.T : register(t1);


// 3Dmigoto declarations
#define cmp -


float ColorGradeSmoothClamp(float x)
{
    const float u = 0.525;
    
    float q = (2.0 - u - 1.0 / u + x * (2.0 + 2.0 / u - x / u)) / 4.0;
    
    return (abs(1.0 - x) < u) ? q : saturate(x);
}

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = sInput.T.Sample(sInput.S_s, v1.xy).xyzw;
  o0.w = r0.w;

/*
  float gMax = max(max(r0.r, r0.g), r0.b);
  gMax = max(gMax, 1e-6);

  float gClamped = ColorGradeSmoothClamp(gMax);
  float rScale = gClamped / gMax;

  r0.xyz = r0.xyz * rScale;
*/

  r0.xyz = r0.xyz * cLutParam.xxx + cLutParam.yyy;
  r0.w = 0.5;
  r1.x = sLut.T.Sample(sLut.S_s, r0.xw).w;
  r1.y = sLut.T.Sample(sLut.S_s, r0.yw).w;
  r1.z = sLut.T.Sample(sLut.S_s, r0.zw).w;
  r1.w = 1;
  o0.x = dot(cFilter._m00_m01_m02_m03, r1.xyzw);
  o0.y = dot(cFilter._m10_m11_m12_m13, r1.xyzw);
  o0.z = dot(cFilter._m20_m21_m22_m23, r1.xyzw);

/*
  o0.xyz = o0.xyz / rScale;
*/
  o0.xyz = o0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.61 on Mon Oct 16 00:20:56 2017
//
//
// Buffer Definitions: 
//
// cbuffer cFilter
// {
//
//   row_major float3x4 cFilter;        // Offset:    0 Size:    48
//
// }
//
// cbuffer cLutParam
// {
//
//   float4 cLutParam;                  // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sLut.S                            sampler      NA          NA    1        1
// sInput.T                          texture  float4          2d    0        1
// sLut.T                            texture  float4          2d    1        1
// cFilter                           cbuffer      NA          NA    0        1
// cLutParam                         cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mov o0.w, r0.w
mad r0.xyz, r0.xyzx, cb1[0].xxxx, cb1[0].yyyy
mov r0.w, l(0.500000)
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.xwxx, t1.wxyz, s1
sample_indexable(texture2d)(float,float,float,float) r1.y, r0.ywyy, t1.xwyz, s1
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.zwzz, t1.xywz, s1
mov r1.w, l(1.000000)
dp4 o0.x, cb0[0].xyzw, r1.xyzw
dp4 o0.y, cb0[1].xyzw, r1.xyzw
dp4 o0.z, cb0[2].xyzw, r1.xyzw
ret 
// Approximately 12 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
