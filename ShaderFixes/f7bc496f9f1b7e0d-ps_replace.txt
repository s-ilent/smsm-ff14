// Shadows, application to screen
// ---- Created with 3Dmigoto v1.3.11 on Fri Aug 27 14:24:13 2021

cbuffer g_CommonParameter : register(b0)
{

  struct
  {
    float4 m_RenderTarget;
    float4 m_Viewport;
    float4 m_Misc;
    float4 m_Misc2;
  } g_CommonParameter : packoffset(c0);

}

cbuffer g_DirectionalShadowParameter : register(b1)
{

  struct
  {
    row_major float4x4 m_ShadowProjectionMatrix;
    float4 m_ShadowDistance;
    float4 m_ShadowMapParameter;
  } g_DirectionalShadowParameter : packoffset(c0);

}

cbuffer g_CloudShadowMatrix : register(b2)
{
  row_major float4x4 g_CloudShadowMatrix : packoffset(c0);
}

/*
SamplerState g_SamplerViewPosition.S_s : register(s0);
SamplerState g_SamplerShadow.S_s : register(s1);
SamplerState g_CloudShadowSampler.S_s : register(s2);
Texture2D<float4> g_SamplerViewPosition.T : register(t0);
Texture2D<float4> g_SamplerShadow.T : register(t1);
Texture2D<float4> g_CloudShadowSampler.T : register(t2);
*/

// 3Dmigoto declarations
#define cmp -


struct Tex2D
{
  SamplerState S_s;
  Texture2D<float4> T;
} 
g_SamplerViewPosition,
g_SamplerShadow,
g_CloudShadowSampler;

void main(
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * g_CommonParameter.m_RenderTarget.xy + g_CommonParameter.m_RenderTarget.zw;
  r0.xyz = g_SamplerViewPosition.T.Sample(g_SamplerViewPosition.S_s, r0.xy).xyz;
  r1.x = g_DirectionalShadowParameter.m_ShadowDistance.z + r0.z;
  r1.x = saturate(g_DirectionalShadowParameter.m_ShadowMapParameter.z * r1.x);
  r1.x = 1 + -r1.x;
  r1.x = r1.x * r1.x;
  r0.w = 1;
  r2.x = dot(g_DirectionalShadowParameter.m_ShadowProjectionMatrix._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_DirectionalShadowParameter.m_ShadowProjectionMatrix._m10_m11_m12_m13, r0.xyzw);
  r2.z = dot(g_DirectionalShadowParameter.m_ShadowProjectionMatrix._m20_m21_m22_m23, r0.xyzw);
  r1.y = dot(g_DirectionalShadowParameter.m_ShadowProjectionMatrix._m30_m31_m32_m33, r0.xyzw);
  r1.yzw = r2.xyz / r1.yyy;
  r2.xyzw = g_SamplerShadow.T.Gather(g_SamplerShadow.S_s, r1.yz, int2(1, 1)).xyzw;
  r1.w = min(1, r1.w);
  r2.xyzw = cmp(r2.xyzw >= r1.wwww);
  r2.xyzw = r2.xyzw ? float4(1,1,1,1) : 0;
  r3.xyzw = g_SamplerShadow.T.Gather(g_SamplerShadow.S_s, r1.yz, int2(-1, 1)).xyzw;
  r3.xyzw = cmp(r3.xyzw >= r1.wwww);
  r4.xy = r3.xw ? float2(-1,-1) : float2(-0,-0);
  r3.xyzw = r3.xyzw ? float4(1,1,1,1) : 0;
  r2.yz = r4.xy + r2.yz;
  r4.xy = r1.yz / g_DirectionalShadowParameter.m_ShadowMapParameter.xy;
  r4.xy = float2(-0.5,-0.5) + r4.xy;
  r4.xy = frac(r4.xy);
  r2.yz = r4.xx * r2.yz + r3.xw;
  r2.yz = r2.yz + r3.yz;
  r2.xy = r2.yz + r2.xw;
  r3.xyzw = g_SamplerShadow.T.Gather(g_SamplerShadow.S_s, r1.yz, int2(1, -1)).xyzw;
  r5.xyzw = g_SamplerShadow.T.Gather(g_SamplerShadow.S_s, r1.yz, int2(-1, -1)).xyzw;
  r5.xyzw = cmp(r5.xyzw >= r1.wwww);
  r3.xyzw = cmp(r3.xyzw >= r1.wwww);
  r3.xyzw = r3.xyzw ? float4(1,1,1,1) : 0;
  r1.yz = r5.wx ? float2(-1,-1) : float2(-0,-0);
  r5.xyzw = r5.xyzw ? float4(1,1,1,1) : 0;
  r1.yz = r3.zy + r1.yz;
  r1.yz = r4.xx * r1.yz + r5.wx;
  r1.yz = r1.yz + r5.zy;
  r1.yz = r1.yz + r3.wx;
  r1.w = r2.x + -r1.y;
  r1.y = r4.y * r1.w + r1.y;
  r1.y = r1.y + r1.z;
  r1.y = r1.y + r2.y;
  r1.z = 0.111111112 * r1.y;
  r1.y = -r1.y * 0.111111112 + g_DirectionalShadowParameter.m_ShadowMapParameter.w;
  r1.x = r1.x * r1.y + r1.z;
  r2.x = dot(g_CloudShadowMatrix._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_CloudShadowMatrix._m10_m11_m12_m13, r0.xyzw);
  r0.x = dot(g_CloudShadowMatrix._m30_m31_m32_m33, r0.xyzw);
  r0.xy = r2.xy / r0.xx;
  r0.z = dot(r0.xy, r0.xy);
  r0.xy = r0.xy * float2(0.5,-0.5) + float2(0.5,-0.5);
  r2.xyzw = g_CloudShadowSampler.T.Sample(g_CloudShadowSampler.S_s, r0.xy).xyzw;
  r0.x = 10 * r0.z;
  r0.x = min(1, r0.x);
  r0.yz = r2.zw + -r2.xy;
  r0.xy = r0.xx * r0.yz + r2.xy;
  r0.xy = r1.xx * r0.xy;
  r0.xy = max(float2(0,0), r0.xy);
  o0.xy = sqrt(r0.xy);
  o0.zw = float2(0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.3.11 on Fri Aug 27 14:24:13 2021
//
//
// Buffer Definitions:
//
// cbuffer g_CommonParameter
// {
//
//   struct CommonParameter
//   {
//
//       float4 m_RenderTarget;         // Offset:    0
//       float4 m_Viewport;             // Offset:   16
//       float4 m_Misc;                 // Offset:   32
//       float4 m_Misc2;                // Offset:   48
//
//   } g_CommonParameter;               // Offset:    0 Size:    64
//
// }
//
// cbuffer g_DirectionalShadowParameter
// {
//
//   struct DirectionalShadowParameter
//   {
//
//       row_major float4x4 m_ShadowProjectionMatrix;// Offset:    0
//       float4 m_ShadowDistance;       // Offset:   64
//       float4 m_ShadowMapParameter;   // Offset:   80
//
//   } g_DirectionalShadowParameter;    // Offset:    0 Size:    96
//
// }
//
// cbuffer g_CloudShadowMatrix
// {
//
//   row_major float4x4 g_CloudShadowMatrix;// Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_SamplerViewPosition.S           sampler      NA          NA    0        1
// g_SamplerShadow.S                 sampler      NA          NA    1        1
// g_CloudShadowSampler.S            sampler      NA          NA    2        1
// g_SamplerViewPosition.T           texture  float4          2d    0        1
// g_SamplerShadow.T                 texture  float4          2d    1        1
// g_CloudShadowSampler.T            texture  float4          2d    2        1
// g_CommonParameter                 cbuffer      NA          NA    0        1
// g_DirectionalShadowParameter      cbuffer      NA          NA    1        1
// g_CloudShadowMatrix               cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6
mad r0.xy, v0.xyxx, cb0[0].xyxx, cb0[0].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0
add r1.x, r0.z, cb1[4].z
mul_sat r1.x, r1.x, cb1[5].z
add r1.x, -r1.x, l(1.000000)
mul r1.x, r1.x, r1.x
mov r0.w, l(1.000000)
dp4 r2.x, cb1[0].xyzw, r0.xyzw
dp4 r2.y, cb1[1].xyzw, r0.xyzw
dp4 r2.z, cb1[2].xyzw, r0.xyzw
dp4 r1.y, cb1[3].xyzw, r0.xyzw
div r1.yzw, r2.xxyz, r1.yyyy
gather4_aoffimmi_indexable(1,1,0)(texture2d)(float,float,float,float) r2.xyzw, r1.yzyy, t1.xyzw, s1.x
min r1.w, r1.w, l(1.000000)
ge r2.xyzw, r2.xyzw, r1.wwww
and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
gather4_aoffimmi_indexable(-1,1,0)(texture2d)(float,float,float,float) r3.xyzw, r1.yzyy, t1.xyzw, s1.x
ge r3.xyzw, r3.xyzw, r1.wwww
movc r4.xy, r3.xwxx, l(-1.000000,-1.000000,0,0), l(-0.000000,-0.000000,0,0)
and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
add r2.yz, r2.yyzy, r4.xxyx
div r4.xy, r1.yzyy, cb1[5].xyxx
add r4.xy, r4.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
frc r4.xy, r4.xyxx
mad r2.yz, r4.xxxx, r2.yyzy, r3.xxwx
add r2.yz, r3.yyzy, r2.yyzy
add r2.xy, r2.xwxx, r2.yzyy
gather4_aoffimmi_indexable(1,-1,0)(texture2d)(float,float,float,float) r3.xyzw, r1.yzyy, t1.xyzw, s1.x
gather4_aoffimmi_indexable(-1,-1,0)(texture2d)(float,float,float,float) r5.xyzw, r1.yzyy, t1.xyzw, s1.x
ge r5.xyzw, r5.xyzw, r1.wwww
ge r3.xyzw, r3.xyzw, r1.wwww
and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
movc r1.yz, r5.wwxw, l(0,-1.000000,-1.000000,0), l(0,-0.000000,-0.000000,0)
and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
add r1.yz, r1.yyzy, r3.zzyz
mad r1.yz, r4.xxxx, r1.yyzy, r5.wwxw
add r1.yz, r5.zzyz, r1.yyzy
add r1.yz, r3.wwxw, r1.yyzy
add r1.w, -r1.y, r2.x
mad r1.y, r4.y, r1.w, r1.y
add r1.y, r1.z, r1.y
add r1.y, r2.y, r1.y
mul r1.z, r1.y, l(0.111111112)
mad r1.y, -r1.y, l(0.111111112), cb1[5].w
mad r1.x, r1.x, r1.y, r1.z
dp4 r2.x, cb2[0].xyzw, r0.xyzw
dp4 r2.y, cb2[1].xyzw, r0.xyzw
dp4 r0.x, cb2[3].xyzw, r0.xyzw
div r0.xy, r2.xyxx, r0.xxxx
dp2 r0.z, r0.xyxx, r0.xyxx
mad r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, -0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t2.xyzw, s2
mul r0.x, r0.z, l(10.000000)
min r0.x, r0.x, l(1.000000)
add r0.yz, -r2.xxyx, r2.zzwz
mad r0.xy, r0.xxxx, r0.yzyy, r2.xyxx
mul r0.xy, r0.xyxx, r1.xxxx
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
sqrt o0.xy, r0.xyxx
mov o0.zw, l(0,0,0,0)
ret
// Approximately 61 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
