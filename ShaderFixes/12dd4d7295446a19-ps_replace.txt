// Desaturates FXAA output(?) and puts it into the w channel for later use.
// This is where we inject dithering, because it's pretty much after main rendering. 
// ---- Created with 3Dmigoto v1.2.31

SamplerState sInputS_s : register(s0);
Texture2D<float4> sInputT : register(t0);

// Settings...

#include "Configuration.h"

// Helpers
#include "Common.h" 

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;
 
  r0.xyz = sInputT.Sample(sInputS_s, v1.xy).xyz; // Original colour.

  #if SATURATION 
      #if (SATURATION==1)
      float luma = dot(r0.xyz, lumaCoef); // Desaturated.
      r0.rgb = lerp(r0.www, r0.xyz, saturationAmount);

      #elif (SATURATION==2)
      float luma = max3(r0.r, r0.g, r0.b);
      r0.rgb = lerp(luma, r0.xyz, saturationAmount);
      
      #elif (SATURATION==3)
      float luma = min(min(r0.r, r0.g), r0.b);
      r0.rgb = lerp(luma, r0.xyz, saturationAmount);
      #endif
  #endif

  // Vibrance
  // Algorithm by CeeJay.dk
  float Vibrance = 0.2;
  if (false) {
      float luma = dot(r0.xyz, lumaCoef); // Desaturated.
      float col_max = max3(r0.r, r0.g, r0.b);
      float col_min = min(min(r0.r, r0.g), r0.b);
      float saturation = col_max - col_min;
      r0.rgb = lerp(luma, r0, 
        (1.0 + (Vibrance * (1.0 - sign(Vibrance) * saturation)))
        );
  }

  #if CUBICCONTRAST  
  float3 cubicContrasted = float3(Cubic(r0.x), Cubic(r0.y), Cubic(r0.z));
  r0.xyz = lerp(r0.xyz, cubicContrasted, contrastCAmount);
  #endif

  #if (DitherMode > 0)
  float3 dither;
  #if (DitherMode == 1)
    dither = ScreenSpaceDither(v0.xy) ;
  #elif (DitherMode == 2)
    dither = SweetFXFastDither3(v0.xy) ;
  #elif (DitherMode == 3)
    dither = ScreenSpaceDitherTri(v0.xy) ;
  #elif (DitherMode == 4)
    dither = ign3(v0.xy) ;
    dither.y  = ign3(v0.xy+ 0.5) ;
    dither *= 2;
  #elif (DitherMode == 5)
    dither = r2_intensity3(v0.xy) ;
    dither.y  = r2_intensity3(v0.xy+ 0.5) ;
    dither *= 2;
  #endif
  // Potential future change: Rework dithering to energy preserving variant.
  //r0.xyz += dither;

  // Energy-preserving version. 
  const float quantizationSteps = 255;
  const float grainBlackLimit = 0.5 * Linear1(1.0 / (quantizationSteps - 1.0));
  const float grainAmount = 0.75 * (Linear1(1.0 / (quantizationSteps - 1.0)) - 1.0);

  r0.xyz = dither * min(r0.xyz + grainBlackLimit, grainAmount) + r0.xyz;

  #endif

  r0.w = dot(r0.xyz, lumaCoef); // Desaturated.

  // Fancy desaturation
  /*
  float3 lumTemp = r0.xyz;
  lumTemp = saturate(lumTemp/(lumTemp+1));
  r0.w = min(lumTemp.x, min(lumTemp.y, lumTemp.z)) +  max(lumTemp.x, max(lumTemp.y, lumTemp.z));
  */
  
  o0.xyzw = r0.xyzw;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.31 on Sat Feb 27 18:56:42 2016
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sInput.T                          texture  float4          2d    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 o0.w, r0.xyzx, l(0.298910, 0.586610, 0.114480, 0.000000)
mov o0.xyz, r0.xyzx
ret 
// Approximately 4 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  