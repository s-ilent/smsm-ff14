// mergetextures2.shcd (makes the edges of the bloom white)
// ---- Created with 3Dmigoto v1.2.40 on Fri Jul 29 19:11:06 2016

cbuffer cMergeWeight : register(b0)
{
  float4 cMergeWeight : packoffset(c0);
}

SamplerState sInputS_s : register(s0);
SamplerState sMerge1S_s : register(s1);
Texture2D<float4> sInputT : register(t0);
Texture2D<float4> sMerge1T : register(t1);


// 3Dmigoto declarations
#define cmp -

#include "Configuration.h"

void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  /*
  r0.xyzw = sMerge1T.Sample(sMerge1S_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.yyyy * r0.xyzw;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.xxxx * r1.xyzw + r0.xyzw;
  r1.x = r0.x + r0.y + r0.z;
  r0.xyz = -r1.xxx * float3(0.5,0.5,0.5) + r0.xyz;
  o0.w = r0.w;
  r0.w = cMergeWeight.z * r1.x; // 
  r1.x = 0.5 * r1.x;
  r0.w = saturate(0.333333343 * r0.w);
  o0.xyz = r0.www * r0.xyz + r1.xxx;
  */

  float colorAmount;
  float fullLuma;
  float4 bloomColor;

  bloomColor = sMerge1T.Sample(sMerge1S_s, v1.xy).xyzw; // Contains... ???
  bloomColor = cMergeWeight.yyyy * bloomColor;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw; // Bloom texture
  bloomColor = cMergeWeight.xxxx * r1.xyzw + bloomColor;
  o0.w = bloomColor.w;

  // With the new tonemapping, the original bloom gets really washed out and weird looking.
  // This replaces or disables the brightening code.

  #if DisableWhitening // Original code
  fullLuma = bloomColor.x + bloomColor.y + bloomColor.z; // Total luminance sum
  bloomColor.xyz = -fullLuma * 0.5 + bloomColor.xyz; // Removes half the sum
  colorAmount = cMergeWeight.z * fullLuma; // 
  fullLuma /= 2; 
  colorAmount = saturate(0.333333343 * colorAmount);
  o0.xyz = colorAmount * bloomColor.xyz + fullLuma;
  #else  
  // This makes the bloom even darker, but I'm not sure if it's necessary. 
  //bloomColor.xyz = lerp(bloomColor.xyz, bloomColor.xyz*bloomColor.xyz, 0.5); 
  o0.xyz = bloomColor.xyz;
  #endif
  
  #if 0
    int i = int(24 * (1. - v1.y));
    if (i == 1) o0.xyz = cMergeWeight.xyz; 
    if (i == 2) o0.xyz = cMergeWeight.xxx; 
    if (i == 3) o0.xyz = cMergeWeight.yyy; 
    if (i == 4) o0.xyz = cMergeWeight.zzz; 
  #endif

  return;
}


void orig( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = sMerge1T.Sample(sMerge1S_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.yyyy * r0.xyzw;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.xxxx * r1.xyzw + r0.xyzw;
  r1.x = r0.x + r0.y + r0.z;
  r0.xyz = -r1.xxx * float3(0.5,0.5,0.5) + r0.xyz;
  o0.w = r0.w;
  r0.w = cMergeWeight.z * r1.x;
  r1.x = 0.5 * r1.x;
  r0.w = saturate(0.333333343 * r0.w);
  o0.xyz = r0.www * r0.xyz + r1.xxx;
  return;
}

void main_v1( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = sMerge1T.Sample(sMerge1S_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.yyyy * r0.xyzw;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw;
  r0.xyzw = cMergeWeight.xxxx * r1.xyzw + r0.xyzw;
  //r1.x = r0.x + r0.y + r0.z;
  //r0.xyz = -r1.xxx * float3(0.5,0.5,0.5) + r0.xyz;
  o0.w = r0.w;
  r0.w = cMergeWeight.z * r1.x; // 
  r0.w = saturate(0.333333343 * r0.w);
    //r0.xyz *= r0.xyz*2;
  o0.xyz = r0.xyz;
  return;
}


void orig_dec( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  float colorAmount;
  float fullLuma;
  float4 bloomColor;

  bloomColor = sMerge1T.Sample(sMerge1S_s, v1.xy).xyzw; // Contains... ???
  bloomColor = cMergeWeight.yyyy * bloomColor;
  r1.xyzw = sInputT.Sample(sInputS_s, v1.xy).xyzw; // Bloom texture
  bloomColor = cMergeWeight.xxxx * r1.xyzw + bloomColor;
  o0.w = bloomColor.w;

  fullLuma = bloomColor.x + bloomColor.y + bloomColor.z; // Total luminance
  bloomColor.xyz = -fullLuma * 0.5 + bloomColor.xyz;
  colorAmount = cMergeWeight.z * fullLuma; // 
  fullLuma /= 2;
  colorAmount = saturate(0.333333343 * colorAmount);
  o0.xyz = colorAmount * bloomColor.xyz + fullLuma;
  return;
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.40 on Fri Jul 29 19:11:06 2016
//
//
// Buffer Definitions: 
//
// cbuffer cMergeWeight
// {
//
//   float4 cMergeWeight;               // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sInput.S                          sampler      NA          NA    0        1
// sMerge1.S                         sampler      NA          NA    1        1
// sInputT                          texture  float4          2d    0        1
// sMerge1T                         texture  float4          2d    1        1
// cMergeWeight                      cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s1
mul r0.xyzw, r0.xyzw, cb0[0].yyyy
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.xyzw, cb0[0].xxxx, r1.xyzw, r0.xyzw
add r1.x, r0.y, r0.x
add r1.x, r0.z, r1.x
mad r0.xyz, -r1.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), r0.xyzx
mov o0.w, r0.w
mul r0.w, r1.x, cb0[0].z
mul r1.x, r1.x, l(0.500000)
mul_sat r0.w, r0.w, l(0.333333343)
mad o0.xyz, r0.wwww, r0.xyzx, r1.xxxx
ret 
// Approximately 13 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
